@inject IStudentService StudentService
@inject NavigationManager navigationManager

@if(StudentService.Students == null || StudentService.Students.Count == 0)
{
    <span>Caricamento studenti...</span>
}
else
{
<table class="table table-bordered table-active">
    <thead>
        <tr>
            <th>ID</th>
            <th>Nome</th>
            <th>Cognome</th>
            <th>Azioni</th>
        </tr>
    </thead>
    <tbody>
        @foreach(var student in StudentService.Students)
            {
                <tr>
                    <td>@student.Id</td>
                    <td>@student.name</td>
                    <td>@student.surname</td>
                    <td>
                        <button class="btn btn-secondary" @onclick="(() => EditStudent(student.Id))"><i class="oi oi-pencil"></i> Modifica</button>
                        <button class="btn btn-secondary" @onclick="(() => DeleteStudent(student.Id))"><i class="oi oi-delete"></i> Elimina</button>
                    </td>
                </tr>
            }
        </tbody>
</table>
<button class="btn btn-primary" @onclick="CreateStudent">Create Student</button>
}

@code {
    private Student student = new Student();
    //private static List<Student> Students = new List<Student>();

    protected override async Task OnInitializedAsync()
    {
        await StudentService.GetStudents();
    }

    void EditStudent(int id)
    {
        navigationManager.NavigateTo($"/student/{id}");
    }

    void CreateStudent()
    {
        navigationManager.NavigateTo("/student");
    }

    async Task DeleteStudent(int id)
    {
        await StudentService.DeleteStudent(id);
    }

}
