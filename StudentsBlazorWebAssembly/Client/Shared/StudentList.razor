@inject IStudentService StudentService
@inject NavigationManager navigationManager
@inject IMatToaster matToaster

@if(StudentService.Students == null || StudentService.Students.Count == 0)
{
    <span>Caricamento studenti...</span>
}
else
{
<table class="table table-bordered table-active">
    <thead>
        <tr>
            <th>ID</th>
            <th>Nome</th>
            <th>Cognome</th>
            <th>Azioni</th>
        </tr>
    </thead>
    <tbody>
        @foreach(var student in StudentService.Students)
            {
                <tr>
                    <td>@student.Id</td>
                    <td>@student.name</td>
                    <td>@student.surname</td>
                    <td>
                        <button class="btn btn-secondary" @onclick="(() => EditStudent(student.Id))"><i class="oi oi-pencil"></i> Modifica</button>
                        <button class="btn btn-secondary" @onclick="(() => OpenDeleteDialog(student))"><i class="oi oi-trash"></i> Elimina</button>
                    </td>
                </tr>
            }
        </tbody>
</table>
<button class="btn btn-primary" @onclick="(() => CreateStudent())"><i class="oi oi-plus"></i> Crea Studente</button>
}

@if (DeleteDialogOpen)
{
    <ModelDialog Title="Cancellazione Studente" Text="Sei sicuro di voler eliminare questo studente?" OnClose="@OnDeleteDialogClose"></ModelDialog>
}

@code {
    private Student student = new Student();
    private Student _studentToDelete;
    public bool DeleteDialogOpen { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await StudentService.GetStudents();
    }

    private void OnDeleteDialogClose(bool accepted)
    {
        if(accepted)
        {
            DeleteStudent(_studentToDelete.Id);
            StudentService.GetStudents();
            StateHasChanged();
            _studentToDelete = null;
        }
        DeleteDialogOpen = false;
        StateHasChanged();
    }
    private void OpenDeleteDialog(Student s)
    {
        DeleteDialogOpen = true;
        _studentToDelete = s;
        StateHasChanged();
    }

    void EditStudent(int id)
    {
        navigationManager.NavigateTo($"/student/{id}");
    }

    void CreateStudent()
    {
        navigationManager.NavigateTo("/student");
    }

    async Task DeleteStudent(int id)
    {
         matToaster.Add("Studente eliminato con successo!", MatToastType.Success);
         await StudentService.DeleteStudent(id);
    }

}
