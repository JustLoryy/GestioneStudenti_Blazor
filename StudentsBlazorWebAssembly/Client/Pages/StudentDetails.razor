@page "/student"
@page "/student/{id:int}"
@inject IStudentService studentService
@inject NavigationManager navigationManager
@inject IMatToaster matToaster

@if(Id == null)
{
    <h3>Create a new Student</h3>
}
else
{
   <h3>Edit @student.name</h3>
}
    <div class="container-xl content">
        <EditForm Model="student" OnSubmit="HandleStudent">
            <div>
                <label for="name">Nome</label>
                <InputText id="name" @bind-Value="student.name" class="form-control"></InputText>
            </div>
            <div>
                <label for="surname">Cognome</label>
                <InputText id="surname" @bind-Value="student.surname" class="form-control"></InputText>
            </div>
            <br>
            <button type="submit" class="btn btn-primary">@btnText</button>
        </EditForm>
    </div>

@code {
    Student student = new Student();

    [Parameter]
    public int? Id { get; set; }

    string btnText = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        btnText = Id == null ? "Create a new Student" : "Update Student";
        await studentService.GetStudents();
    }

    protected override async Task OnParametersSetAsync()
    {
        if(Id != null) student = await studentService.GetStudentById((int)Id);
    }

    async Task HandleStudent()
    {
        if (Id == null)
        {
            matToaster.Add("Studente creato con successo!", MatToastType.Success);
            await studentService.CreateStudent(student);
        }
        else
        {
            matToaster.Add("Studente aggiornato con successo!", MatToastType.Success);
            await studentService.UpdateStudent(student);
        }
    }
}
